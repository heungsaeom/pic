D G "RESERVED34" 5 96 "0x3F"
D G "__PCM__" 0 56 ""5.015""
D G "__DEVICE__" 0 56 "887"
D G "__DATE__" 0 56 ""18-May-16""
D G "__TIME__" 0 56 ""22:06:38"" "Standard Header file for the PIC16F887 device ////////////////"
c L "set_tris_a" 2 3 6 "FUNCTION"
v L "value" 2 39 "int8" `54 
f B "set_tris_a" 2 39 "void(int8 value)" `53 
v L "value" 2 40 "int8" `56 
f B "set_tris_b" 2 40 "void(int8 value)" `55 
v L "value" 2 41 "int8" `58 
f B "set_tris_c" 2 41 "void(int8 value)" `57 
v L "value" 2 42 "int8" `60 
f B "set_tris_d" 2 42 "void(int8 value)" `59 
v L "value" 2 43 "int8" `62 
f B "set_tris_e" 2 43 "void(int8 value)" `61 
f B "get_tris_a" 2 44 "int8()" `63 
f B "get_tris_b" 2 45 "int8()" `64 
f B "get_tris_c" 2 46 "int8()" `65 
f B "get_tris_d" 2 47 "int8()" `66 
f B "get_tris_e" 2 48 "int8()" `67 
v L "value" 2 49 "int8" `69 
f B "output_a" 2 49 "void(int8 value)" `68 
v L "value" 2 50 "int8" `71 
f B "output_b" 2 50 "void(int8 value)" `70 
v L "value" 2 51 "int8" `73 
f B "output_c" 2 51 "void(int8 value)" `72 
v L "value" 2 52 "int8" `75 
f B "output_d" 2 52 "void(int8 value)" `74 
v L "value" 2 53 "int8" `77 
f B "output_e" 2 53 "void(int8 value)" `76 
f B "input_a" 2 54 "int8()" `78 
f B "input_b" 2 55 "int8()" `79 
f B "input_c" 2 56 "int8()" `80 
f B "input_d" 2 57 "int8()" `81 
f B "input_e" 2 58 "int8()" `82 
f B "input_change_a" 2 59 "int8()" `83 
f B "input_change_b" 2 60 "int8()" `84 
f B "input_change_c" 2 61 "int8()" `85 
f B "input_change_d" 2 62 "int8()" `86 
f B "input_change_e" 2 63 "int8()" `87 
v L "pin" 2 64 "int16" `89 
f B "input" 2 64 "int8(int16 pin)" `88 
v L "pin" 2 65 "int16" `91 
f B "input_state" 2 65 "int8(int16 pin)" `90 
v L "pin" 2 66 "int16" `93 
f B "output_low" 2 66 "void(int16 pin)" `92 
v L "pin" 2 67 "int16" `95 
f B "output_high" 2 67 "void(int16 pin)" `94 
v L "pin" 2 68 "int16" `97 
f B "output_toggle" 2 68 "void(int16 pin)" `96 
v L "pin" 2 69 "int16" `99 
v L "level" 2 69 "int8" `100 
f B "output_bit" 2 69 "void(int16 pin,int8 level)" `98 
v L "pin" 2 70 "int16" `102 
f B "output_float" 2 70 "void(int16 pin)" `101 
v L "pin" 2 71 "int16" `104 
f B "output_drive" 2 71 "void(int16 pin)" `103  "Constants used to identify pins in the above are:"
d G "PIN_A0" 2 75 "40"
d G "PIN_A1" 2 76 "41"
d G "PIN_A2" 2 77 "42"
d G "PIN_A3" 2 78 "43"
d G "PIN_A4" 2 79 "44"
d G "PIN_A5" 2 80 "45"
d G "PIN_A6" 2 81 "46"
d G "PIN_A7" 2 82 "47"
d G "PIN_B0" 2 84 "48"
d G "PIN_B1" 2 85 "49"
d G "PIN_B2" 2 86 "50"
d G "PIN_B3" 2 87 "51"
d G "PIN_B4" 2 88 "52"
d G "PIN_B5" 2 89 "53"
d G "PIN_B6" 2 90 "54"
d G "PIN_B7" 2 91 "55"
d G "PIN_C0" 2 93 "56"
d G "PIN_C1" 2 94 "57"
d G "PIN_C2" 2 95 "58"
d G "PIN_C3" 2 96 "59"
d G "PIN_C4" 2 97 "60"
d G "PIN_C5" 2 98 "61"
d G "PIN_C6" 2 99 "62"
d G "PIN_C7" 2 100 "63"
d G "PIN_D0" 2 102 "64"
d G "PIN_D1" 2 103 "65"
d G "PIN_D2" 2 104 "66"
d G "PIN_D3" 2 105 "67"
d G "PIN_D4" 2 106 "68"
d G "PIN_D5" 2 107 "69"
d G "PIN_D6" 2 108 "70"
d G "PIN_D7" 2 109 "71"
d G "PIN_E0" 2 111 "72"
d G "PIN_E1" 2 112 "73"
d G "PIN_E2" 2 113 "74"
d G "PIN_E3" 2 114 "75"
d G "FALSE" 2 117 "0"
d G "TRUE" 2 118 "1"
d G "BYTE" 2 120 "int8"
d G "BOOLEAN" 2 121 "int1"
d G "getc" 2 123 "getch"
d G "fgetc" 2 124 "getch"
d G "getchar" 2 125 "getch"
d G "putc" 2 126 "putchar"
d G "fputc" 2 127 "putchar"
d G "fgets" 2 128 "gets"
d G "fputs" 2 129 "puts"
c L "output_drive" 2 3 3 "FUNCTION"
f B "restart_cause" 2 134 "int8()" `105 
f B "reset_cpu" 2 135 "void()" `106 
f B "sleep" 2 136 "void()" `107  "Constants returned from RESTART_CAUSE() are:"
d G "WDT_FROM_SLEEP" 2 138 "3"
d G "WDT_TIMEOUT" 2 139 "11"
d G "MCLR_FROM_SLEEP" 2 140 "19"
d G "MCLR_FROM_RUN" 2 141 "27"
d G "NORMAL_POWER_UP" 2 142 "25"
d G "BROWNOUT_RESTART" 2 143 "26"
c L "sleep" 2 3 5 "FUNCTION"
v L "mode" 2 150 "int8" `109 
f B "setup_timer_0" 2 150 "void(int8 mode)" `108 
v L "value" 2 151 "int8" `111 
f B "set_timer0" 2 151 "void(int8 value)" `110 
f B "get_timer0" 2 152 "int8()" `112 
v L "mode" 2 153 "int8" `114 
v L "prescaler" 2 153 "int8" `115 
f B "setup_counters" 2 153 "void(int8 mode,int8 prescaler)" `113 
v L "value" 2 154 "int8" `117 
f B "set_rtcc" 2 154 "void(int8 value)" `116 
f B "get_rtcc" 2 155 "int8()" `118  "Constants used for SETUP_TIMER_0() are:"
d G "T0_INTERNAL" 2 157 "0"
d G "T0_EXT_L_TO_H" 2 158 "32"
d G "T0_EXT_H_TO_L" 2 159 "48"
d G "T0_DIV_1" 2 161 "8"
d G "T0_DIV_2" 2 162 "0"
d G "T0_DIV_4" 2 163 "1"
d G "T0_DIV_8" 2 164 "2"
d G "T0_DIV_16" 2 165 "3"
d G "T0_DIV_32" 2 166 "4"
d G "T0_DIV_64" 2 167 "5"
d G "T0_DIV_128" 2 168 "6"
d G "T0_DIV_256" 2 169 "7"
d G "T0_8_BIT" 2 172 "0"
d G "RTCC_INTERNAL" 2 174 "0" "The following are provided for compatibility"
d G "RTCC_EXT_L_TO_H" 2 175 "32" "with older compiler versions"
d G "RTCC_EXT_H_TO_L" 2 176 "48"
d G "RTCC_DIV_1" 2 177 "8"
d G "RTCC_DIV_2" 2 178 "0"
d G "RTCC_DIV_4" 2 179 "1"
d G "RTCC_DIV_8" 2 180 "2"
d G "RTCC_DIV_16" 2 181 "3"
d G "RTCC_DIV_32" 2 182 "4"
d G "RTCC_DIV_64" 2 183 "5"
d G "RTCC_DIV_128" 2 184 "6"
d G "RTCC_DIV_256" 2 185 "7"
d G "RTCC_8_BIT" 2 186 "0"
c L "get_rtcc" 2 3 8 "FUNCTION"
v L "mode" 2 197 "int16" `120 
f B "setup_wdt" 2 197 "void(int16 mode)" `119 
f B "restart_wdt" 2 198 "void()" `121  "Constants used for SETUP_WDT() are:"
d G "WDT_18MS" 2 201 "8"
d G "WDT_36MS" 2 202 "9"
d G "WDT_72MS" 2 203 "10"
d G "WDT_144MS" 2 204 "11"
d G "WDT_288MS" 2 205 "12"
d G "WDT_576MS" 2 206 "13"
d G "WDT_1152MS" 2 207 "14"
d G "WDT_2304MS" 2 208 "15"
d G "WDT_ON" 2 213 "0x4000"
d G "WDT_OFF" 2 214 "0"
d G "WDT_DIV_16" 2 215 "0x100"
d G "WDT_DIV_8" 2 216 "0x300"
d G "WDT_DIV_4" 2 217 "0x500"
d G "WDT_DIV_2" 2 218 "0x700"
d G "WDT_TIMES_1" 2 219 "0x900" "Default"
d G "WDT_TIMES_2" 2 220 "0xB00"
d G "WDT_TIMES_4" 2 221 "0xD00"
d G "WDT_TIMES_8" 2 222 "0xF00"
d G "WDT_TIMES_16" 2 223 "0x1100"
d G "WDT_TIMES_32" 2 224 "0x1300"
d G "WDT_TIMES_64" 2 225 "0x1500"
d G "WDT_TIMES_128" 2 226 "0x1700"
c L "restart_wdt" 2 3 3 "FUNCTION"
v L "mode" 2 231 "int16" `123 
f B "setup_timer_1" 2 231 "void(int16 mode)" `122 
f B "get_timer1" 2 232 "int16()" `124 
v L "value" 2 233 "int16" `126 
f B "set_timer1" 2 233 "void(int16 value)" `125  "Constants used for SETUP_TIMER_1() are:"
d G "T1_DISABLED" 2 236 "0"
d G "T1_INTERNAL" 2 237 "5"
d G "T1_EXTERNAL" 2 238 "7"
d G "T1_EXTERNAL_SYNC" 2 239 "3"
d G "T1_CLK_OUT" 2 241 "8"
d G "T1_DIV_BY_1" 2 243 "0"
d G "T1_DIV_BY_2" 2 244 "0x10"
d G "T1_DIV_BY_4" 2 245 "0x20"
d G "T1_DIV_BY_8" 2 246 "0x30"
d G "T1_GATE" 2 248 "0x40"
d G "T1_GATE_INVERTED" 2 249 "0xC0"
c L "set_timer1" 2 3 3 "FUNCTION"
v L "mode" 2 254 "int8" `128 
v L "period" 2 254 "int8" `129 
v L "postscale" 2 254 "int8" `130 
f B "setup_timer_2" 2 254 "void(int8 mode,int8 period,int8 postscale)" `127 
f B "get_timer2" 2 255 "int8()" `131 
v L "value" 2 256 "int8" `133 
f B "set_timer2" 2 256 "void(int8 value)" `132  "Constants used for SETUP_TIMER_2() are:"
d G "T2_DISABLED" 2 258 "0"
d G "T2_DIV_BY_1" 2 259 "4"
d G "T2_DIV_BY_4" 2 260 "5"
d G "T2_DIV_BY_16" 2 261 "6"
c L "set_timer2" 2 3 4 "FUNCTION"
v L "mode" 2 267 "int32" `135 
f B "setup_ccp1" 2 267 "void(int32 mode)" `134 
v L "mode" 2 268 "int32" `137 
v L "pwm" 2 268 "int8" `138 
f G "setup_ccp1" 2 268 "void(int32 mode,int8 pwm)" `136 
v L "value" 2 269 "int16" `140 
f B "set_pwm1_duty" 2 269 "void(int16 value)" `139  "Constants used for SETUP_CCPx() are:"
d G "CCP_OFF" 2 271 "0"
d G "CCP_CAPTURE_FE" 2 272 "4"
d G "CCP_CAPTURE_RE" 2 273 "5"
d G "CCP_CAPTURE_DIV_4" 2 274 "6"
d G "CCP_CAPTURE_DIV_16" 2 275 "7"
d G "CCP_COMPARE_SET_ON_MATCH" 2 276 "8"
d G "CCP_COMPARE_CLR_ON_MATCH" 2 277 "9"
d G "CCP_COMPARE_INT" 2 278 "0xA"
d G "CCP_COMPARE_RESET_TIMER" 2 279 "0xB"
d G "CCP_PWM" 2 280 "0xC"
d G "CCP_PWM_PLUS_1" 2 281 "0x1c"
d G "CCP_PWM_PLUS_2" 2 282 "0x2c"
d G "CCP_PWM_PLUS_3" 2 283 "0x3c"
d G "CCP_PWM_H_H" 2 288 "0x0c"
d G "CCP_PWM_H_L" 2 289 "0x0d"
d G "CCP_PWM_L_H" 2 290 "0x0e"
d G "CCP_PWM_L_L" 2 291 "0x0f"
d G "CCP_PWM_FULL_BRIDGE" 2 293 "0x40"
d G "CCP_PWM_FULL_BRIDGE_REV" 2 294 "0xC0"
d G "CCP_PWM_HALF_BRIDGE" 2 295 "0x80"
d G "CCP_SHUTDOWN_ON_COMP1" 2 297 "0x100000"
d G "CCP_SHUTDOWN_ON_COMP2" 2 298 "0x200000"
d G "CCP_SHUTDOWN_ON_COMP" 2 299 "0x300000"
d G "CCP_SHUTDOWN_ON_INT0" 2 300 "0x400000"
d G "CCP_SHUTDOWN_ON_COMP1_INT0" 2 301 "0x500000"
d G "CCP_SHUTDOWN_ON_COMP2_INT0" 2 302 "0x600000"
d G "CCP_SHUTDOWN_ON_COMP_INT0" 2 303 "0x700000"
d G "CCP_SHUTDOWN_AC_L" 2 305 "0x000000"
d G "CCP_SHUTDOWN_AC_H" 2 306 "0x040000"
d G "CCP_SHUTDOWN_AC_F" 2 307 "0x080000"
d G "CCP_SHUTDOWN_BD_L" 2 309 "0x000000"
d G "CCP_SHUTDOWN_BD_H" 2 310 "0x010000"
d G "CCP_SHUTDOWN_BD_F" 2 311 "0x020000"
d G "CCP_SHUTDOWN_RESTART" 2 313 "0x80000000"
d G "CCP_PULSE_STEERING_A" 2 315 "0x01000000"
d G "CCP_PULSE_STEERING_B" 2 316 "0x02000000"
d G "CCP_PULSE_STEERING_C" 2 317 "0x04000000"
d G "CCP_PULSE_STEERING_D" 2 318 "0x08000000"
d G "CCP_PULSE_STEERING_SYNC" 2 319 "0x10000000"
c L "set_pwm1_duty" 2 3 1 "FUNCTION"
v L "mode" 2 323 "int32" `145 
f B "setup_ccp2" 2 323 "void(int32 mode)" `144 
v L "mode" 2 324 "int32" `147 
v L "pwm" 2 324 "int8" `148 
f G "setup_ccp2" 2 324 "void(int32 mode,int8 pwm)" `146 
v L "value" 2 325 "int16" `150 
f B "set_pwm2_duty" 2 325 "void(int16 value)" `149 
c L "set_pwm2_duty" 2 3 3 "FUNCTION"
v L "mode" 2 332 "int32" `155 
f B "setup_spi" 2 332 "void(int32 mode)" `154 
v L "value" 2 333 "int8" `157 
f B "spi_write" 2 333 "void(int8 value)" `156 
f B "spi_read" 2 334 "int8()" `158 
v L "value" 2 335 "int8" `160 
f G "spi_read" 2 335 "int8(int8 value)" `159 
f B "spi_data_in" 2 336 "int8()" `161  "Constants used in SETUP_SPI() are:"
d G "SPI_DISABLED" 2 338 "0x00"
d G "SPI_MASTER" 2 339 "0x20"
d G "SPI_SLAVE" 2 340 "0x24"
d G "SPI_SCK_IDLE_HIGH" 2 341 "0x10"
d G "SPI_SCK_IDLE_LOW" 2 342 "0x00"
d G "SPI_CLK_DIV_4" 2 343 "0x00"
d G "SPI_CLK_DIV_16" 2 344 "0x01"
d G "SPI_CLK_DIV_64" 2 345 "0x02"
d G "SPI_CLK_T2" 2 346 "0x03"
d G "SPI_SS_DISABLED" 2 347 "0x01"
d G "SPI_XMIT_L_TO_H" 2 349 "0x4000"
d G "SPI_XMIT_H_TO_L" 2 350 "0x0000"
d G "SPI_SAMPLE_AT_MIDDLE" 2 352 "0x0000"
d G "SPI_SAMPLE_AT_END" 2 353 "0x8000"
d G "SPI_L_TO_H" 2 356 "SPI_SCK_IDLE_LOW"
d G "SPI_H_TO_L" 2 357 "SPI_SCK_IDLE_HIGH"
c L "spi_data_in" 2 3 2 "FUNCTION"
v L "baud" 2 361 "int32" `163 
f B "setup_uart" 2 361 "void(int32 baud)" `162 
v L "baud" 2 362 "int32" `165 
v L "stream" 2 362 "int8" `166 
f G "setup_uart" 2 362 "void(int32 baud,int8 stream)" `164 
v L "baud" 2 363 "int32" `168 
v L "stream" 2 363 "int8" `169 
v L "clock" 2 363 "int32" `170 
f G "setup_uart" 2 363 "void(int32 baud,int8 stream,int32 clock)" `167 
v L "baud" 2 364 "int32" `172 
f B "set_uart_speed" 2 364 "void(int32 baud)" `171 
v L "baud" 2 365 "int32" `174 
v L "stream" 2 365 "int8" `175 
f G "set_uart_speed" 2 365 "void(int32 baud,int8 stream)" `173 
v L "baud" 2 366 "int32" `177 
v L "stream" 2 366 "int8" `178 
v L "clock" 2 366 "int32" `179 
f G "set_uart_speed" 2 366 "void(int32 baud,int8 stream,int32 clock)" `176  "Constants used in setup_uart() are:"
d G "UART_ADDRESS" 2 370 "2"
d G "UART_DATA" 2 371 "4"
d G "UART_AUTODETECT" 2 372 "8"
d G "UART_AUTODETECT_NOWAIT" 2 373 "9"
d G "UART_WAKEUP_ON_RDA" 2 374 "10"
d G "UART_SEND_BREAK" 2 375 "13"
c L "set_uart_speed" 2 3 3 "FUNCTION"
v L "mode" 2 379 "int32" `181 
f B "setup_comparator" 2 379 "void(int32 mode)" `180  "Constants used in setup_comparator() are:"
d G "NC_NC_NC_NC" 2 383 "0x00"
d G "NC_NC" 2 384 "0x00"
d G "CP1_A0_A3" 2 387 "0x00090080"
d G "CP1_A1_A3" 2 388 "0x000A0081"
d G "CP1_B3_A3" 2 389 "0x00880082"
d G "CP1_B1_A3" 2 390 "0x00280083"
d G "CP1_A0_VREF" 2 391 "0x00010084"
d G "CP1_A1_VREF" 2 392 "0x00020085"
d G "CP1_B3_VREF" 2 393 "0x00800086"
d G "CP1_B1_VREF" 2 394 "0x00200087"
d G "CP1_OUT_ON_A4" 2 396 "0x00000020"
d G "CP1_INVERT" 2 397 "0x00000010"
d G "CP1_ABSOLUTE_VREF" 2 398 "0x20000000"
d G "CP2_A0_A2" 2 401 "0x00058000"
d G "CP2_A1_A2" 2 402 "0x00068100"
d G "CP2_B3_A2" 2 403 "0x00848200"
d G "CP2_B1_A2" 2 404 "0x00248300"
d G "CP2_A0_VREF" 2 405 "0x00018400"
d G "CP2_A1_VREF" 2 406 "0x00028500"
d G "CP2_B3_VREF" 2 407 "0x00808600"
d G "CP2_B1_VREF" 2 408 "0x00208700"
d G "CP2_OUT_ON_A5" 2 410 "0x00002000"
d G "CP2_INVERT" 2 411 "0x00001000"
d G "CP2_ABSOLUTE_VREF" 2 412 "0x10000000"
d G "CP2_T1_SYNC" 2 415 "0x01000000"
d G "CP2_T1_GATE" 2 416 "0x02000000"
c L "setup_comparator" 2 3 2 "FUNCTION"
v L "mode" 2 424 "int8" `185 
f B "setup_vref" 2 424 "void(int8 mode)" `184  "Constants used in setup_vref() are:"
d G "VREF_LOW" 2 426 "0xa0"
d G "VREF_HIGH" 2 427 "0x80"
c L "setup_vref" 2 3 3 "FUNCTION"
v L "mode" 2 433 "int8" `187 
f B "setup_oscillator" 2 433 "int8(int8 mode)" `186  "Constants used in setup_oscillator() are:"
d G "OSC_31KHZ" 2 435 "1"
d G "OSC_125KHZ" 2 436 "0x11"
d G "OSC_250KHZ" 2 437 "0x21"
d G "OSC_500KHZ" 2 438 "0x31"
d G "OSC_1MHZ" 2 439 "0x41"
d G "OSC_2MHZ" 2 440 "0x51"
d G "OSC_4MHZ" 2 441 "0x61"
d G "OSC_8MHZ" 2 442 "0x71"
d G "OSC_INTRC" 2 443 "1"
d G "OSC_NORMAL" 2 444 "0"
d G "OSC_STATE_STABLE" 2 446 "4"
d G "OSC_31KHZ_STABLE" 2 447 "2"
c L "setup_oscillator" 2 3 4 "FUNCTION"
v L "mode" 2 455 "int16" `189 
f B "setup_adc" 2 455 "void(int16 mode)" `188 
f B "read_adc" 2 456 "int8()" `190 
v L "mode" 2 457 "int8" `192 
f G "read_adc" 2 457 "int8(int8 mode)" `191 
f G "read_adc" 2 458 "int16()" `193 
v L "mode" 2 459 "int8" `195 
f G "read_adc" 2 459 "int16(int8 mode)" `194 
f B "adc_done" 2 460 "int8()" `196  "Constants used for SETUP_ADC() are:"
d G "ADC_OFF" 2 462 "0" "ADC Off"
d G "ADC_CLOCK_DIV_2" 2 463 "0x100"
d G "ADC_CLOCK_DIV_8" 2 464 "0x40"
d G "ADC_CLOCK_DIV_32" 2 465 "0x80"
d G "ADC_CLOCK_INTERNAL" 2 466 "0xc0" "Internal 2-6us"
c L "adc_done" 2 3 1 "FUNCTION"
v L "pins" 2 469 "int32" `198 
f B "setup_adc_ports" 2 469 "void(int32 pins)" `197 
v L "pins" 2 470 "int32" `200 
v L "reference" 2 470 "int32" `201 
f G "setup_adc_ports" 2 470 "void(int32 pins,int32 reference)" `199 
v L "channel" 2 471 "int8" `203 
f B "set_adc_channel" 2 471 "void(int8 channel)" `202  "Constants used in SETUP_ADC_PORTS() are:"
d G "sAN0" 2 475 "1" "| A0"
d G "sAN1" 2 476 "2" "| A1"
d G "sAN2" 2 477 "4" "| A2"
d G "sAN3" 2 478 "8" "| A3"
d G "sAN4" 2 479 "16" "| A5"
d G "sAN5" 2 480 "32" "| E0"
d G "sAN6" 2 481 "64" "| E1"
d G "sAN7" 2 482 "128" "| E2"
d G "sAN8" 2 483 "0x10000" "| B2"
d G "sAN9" 2 484 "0x20000" "| B3"
d G "sAN10" 2 485 "0x40000" "| B1"
d G "sAN11" 2 486 "0x80000" "| B4"
d G "sAN12" 2 487 "0x100000" "| B0"
d G "sAN13" 2 488 "0x200000" "| B5"
d G "NO_ANALOGS" 2 489 "0" "None"
d G "ALL_ANALOG" 2 490 "0x1F00FF" "A0 A1 A2 A3 A5 E0 E1 E2 B0 B1 B2 B3 B4 B5"
d G "VSS_VDD" 2 493 "0x0000" "| Range 0-Vdd"
d G "VSS_VREF" 2 494 "0x1000" "| Range 0-Vref"
d G "VREF_VREF" 2 495 "0x3000" "| Range Vref-Vref"
d G "VREF_VDD" 2 496 "0x2000" "| Range Vref-Vdd"
d G "ADC_START_AND_READ" 2 499 "7" "This is the default if nothing is specified"
d G "ADC_START_ONLY" 2 500 "1"
d G "ADC_READ_ONLY" 2 501 "6"
c L "set_adc_channel" 2 3 3 "FUNCTION"
v L "x" 2 507 "sint8" `205 
f B "abs" 2 507 "sint8(sint8 x)" `204 
v L "x" 2 508 "sint16" `207 
f G "abs" 2 508 "sint16(sint16 x)" `206 
v L "x" 2 509 "sint32" `209 
f G "abs" 2 509 "sint32(sint32 x)" `208 
v L "x" 2 510 "float" `211 
f G "abs" 2 510 "float(float x)" `210 
v L "??65535" 2 511 "int8" `213 
v L "??65535" 2 511 "int8" `214 
f B "_mul" 2 511 "int16(int8 ,int8 )" `212 
v L "??65535" 2 512 "sint8" `213 
v L "??65535" 2 512 "sint8" `217 
f G "_mul" 2 512 "sint16(sint8 ,sint8 )" `215 
v L "??65535" 2 513 "int16" `213 
v L "??65535" 2 513 "int16" `220 
f G "_mul" 2 513 "int32(int16 ,int16 )" `218 
v L "??65535" 2 514 "sint16" `213 
v L "??65535" 2 514 "sint16" `223 
f G "_mul" 2 514 "sint32(sint16 ,sint16 )" `221  "Memory Manipulation Prototypes:"
v L "bank" 2 517 "int8" `225 
v L "offset" 2 517 "int8" `226 
f B "read_bank" 2 517 "int8(int8 bank,int8 offset)" `224 
v L "bank" 2 518 "int8" `228 
v L "offset" 2 518 "int8" `229 
v L "value" 2 518 "int8" `230 
f B "write_bank" 2 518 "void(int8 bank,int8 offset,int8 value)" `227 
v L "dest" 2 519 "*int8" `232 
v L "src" 2 519 "*int8" `233 
f B "strcpy" 2 519 "void(*int8 dest,*int8 src)" `231 
v L "dest" 2 520 "*int8" `235 
v L "src" 2 520 "*int8" `236 
f B "strcopy" 2 520 "void(*int8 dest,*int8 src)" `234 
v L "destination" 2 521 "*int8" `238 
v L "value" 2 521 "int8" `239 
v L "num" 2 521 "int16" `240 
f B "memset" 2 521 "void(*int8 destination,int8 value,int16 num)" `237 
v L "destination" 2 522 "*int8" `242 
v L "source" 2 522 "*int8" `243 
v L "num" 2 522 "int16" `244 
f B "memcpy" 2 522 "void(*int8 destination,*int8 source,int16 num)" `241  "String Prototypes:"
v L "cvalue" 2 525 "int8" `246 
f B "toupper" 2 525 "int8(int8 cvalue)" `245 
v L "cvalue" 2 526 "int8" `248 
f B "tolower" 2 526 "int8(int8 cvalue)" `247 
v L "string" 2 527 "*int8" `250 
v L "cstring" 2 527 "*int8" `251 
f B "sprintf" 2 527 "void(*int8 string,*int8 cstring,*int8 _VA_LIST)" `249  "Data Manipulators Prototypes:"
v L "address" 2 530 "*int8" `254 
v L "bytes" 2 530 "int8" `255 
v L "value" 2 530 "int8" `256 
f B "shift_left" 2 530 "int8(*int8 address,int8 bytes,int8 value)" `253 
v L "address" 2 531 "*int8" `258 
v L "bytes" 2 531 "int8" `259 
v L "value" 2 531 "int8" `260 
f B "shift_right" 2 531 "int8(*int8 address,int8 bytes,int8 value)" `257 
v L "address" 2 532 "*int8" `262 
v L "bytes" 2 532 "int8" `263 
f B "rotate_left" 2 532 "void(*int8 address,int8 bytes)" `261 
v L "address" 2 533 "*int8" `265 
v L "bytes" 2 533 "int8" `266 
f B "rotate_right" 2 533 "void(*int8 address,int8 bytes)" `264 
v L "value" 2 534 "int8" `268 
f B "swap" 2 534 "void(int8 value)" `267 
v L "var" 2 535 "int16" `270 
v L "offset" 2 535 "int8" `271 
f B "make8" 2 535 "int8(int16 var,int8 offset)" `269 
v L "var" 2 536 "int32" `270 
v L "offset" 2 536 "int8" `274 
f G "make8" 2 536 "int8(int32 var,int8 offset)" `272 
v L "varhigh" 2 537 "int8" `276 
v L "varlow" 2 537 "int8" `277 
f B "make16" 2 537 "int16(int8 varhigh,int8 varlow)" `275 
v L "var1" 2 538 "int16" `279 
f B "make32" 2 538 "int32(int16 var1)" `278 
v L "var1" 2 539 "int16" `281 
v L "var2" 2 539 "int16" `282 
f G "make32" 2 539 "int32(int16 var1,int16 var2)" `280 
v L "var1" 2 540 "int16" `281 
v L "var2" 2 540 "int8" `285 
f G "make32" 2 540 "int32(int16 var1,int8 var2)" `283 
v L "var1" 2 541 "int16" `287 
v L "var2" 2 541 "int8" `288 
v L "var3" 2 541 "int8" `289 
f G "make32" 2 541 "int32(int16 var1,int8 var2,int8 var3)" `286 
v L "var1" 2 542 "int8" `291 
f G "make32" 2 542 "int32(int8 var1)" `290 
v L "var1" 2 543 "int8" `281 
v L "var2" 2 543 "int8" `294 
f G "make32" 2 543 "int32(int8 var1,int8 var2)" `292 
v L "var1" 2 544 "int8" `287 
v L "var2" 2 544 "int8" `288 
v L "var3" 2 544 "int8" `298 
f G "make32" 2 544 "int32(int8 var1,int8 var2,int8 var3)" `295 
v L "var1" 2 545 "int8" `300 
v L "var2" 2 545 "int8" `301 
v L "var3" 2 545 "int8" `302 
v L "var4" 2 545 "int8" `303 
f G "make32" 2 545 "int32(int8 var1,int8 var2,int8 var3,int8 var4)" `299 
v L "var1" 2 546 "int8" `281 
v L "var2" 2 546 "int16" `306 
f G "make32" 2 546 "int32(int8 var1,int16 var2)" `304 
v L "var1" 2 547 "int8" `287 
v L "var2" 2 547 "int16" `288 
v L "var3" 2 547 "int8" `310 
f G "make32" 2 547 "int32(int8 var1,int16 var2,int8 var3)" `307 
v L "var1" 2 548 "int8" `287 
v L "var2" 2 548 "int8" `288 
v L "var3" 2 548 "int16" `314 
f G "make32" 2 548 "int32(int8 var1,int8 var2,int16 var3)" `311 
v L "var" 2 549 "int8" `316 
v L "bit" 2 549 "int8" `317 
f B "bit_set" 2 549 "void(int8 var,int8 bit)" `315 
v L "var" 2 550 "int16" `316 
v L "bit" 2 550 "int8" `320 
f G "bit_set" 2 550 "void(int16 var,int8 bit)" `318 
v L "var" 2 551 "int32" `316 
v L "bit" 2 551 "int8" `323 
f G "bit_set" 2 551 "void(int32 var,int8 bit)" `321 
v L "var" 2 552 "int8" `325 
v L "bit" 2 552 "int8" `326 
f B "bit_clear" 2 552 "void(int8 var,int8 bit)" `324 
v L "var" 2 553 "int16" `325 
v L "bit" 2 553 "int8" `329 
f G "bit_clear" 2 553 "void(int16 var,int8 bit)" `327 
v L "var" 2 554 "int32" `325 
v L "bit" 2 554 "int8" `332 
f G "bit_clear" 2 554 "void(int32 var,int8 bit)" `330 
v L "var" 2 555 "int8" `334 
v L "bit" 2 555 "int8" `335 
f B "bit_test" 2 555 "int8(int8 var,int8 bit)" `333 
v L "var" 2 556 "int16" `334 
v L "bit" 2 556 "int8" `338 
f G "bit_test" 2 556 "int8(int16 var,int8 bit)" `336 
v L "var" 2 557 "int32" `334 
v L "bit" 2 557 "int8" `341 
f G "bit_test" 2 557 "int8(int32 var,int8 bit)" `339  "#use delay() Prototypes:"
v L "count" 2 560 "int8" `343 
f B "delay_cycles" 2 560 "void(int8 count)" `342 
v L "time" 2 561 "int16" `345 
f B "delay_ms" 2 561 "void(int16 time)" `344 
v L "time" 2 562 "int16" `347 
f B "delay_us" 2 562 "void(int16 time)" `346  "#use rs232() Prototypes:"
v L "cdata" 2 565 "int8" `349 
f B "putchar" 2 565 "void(int8 cdata)" `348 
v L "cdata" 2 566 "int8" `351 
v L "stream" 2 566 "int8" `352 
f G "putchar" 2 566 "void(int8 cdata,int8 stream)" `350 
v L "string" 2 567 "*int8" `354 
f B "puts" 2 567 "void(*int8 string)" `353 
v L "string" 2 568 "*int8" `356 
v L "stream" 2 568 "int8" `357 
f G "puts" 2 568 "void(*int8 string,int8 stream)" `355 
f B "getch" 2 569 "int8()" `358 
v L "stream" 2 570 "int8" `360 
f G "getch" 2 570 "int8(int8 stream)" `359 
v L "string" 2 571 "*int8" `362 
f B "gets" 2 571 "void(*int8 string)" `361 
v L "string" 2 572 "*int8" `364 
v L "stream" 2 572 "int8" `365 
f G "gets" 2 572 "void(*int8 string,int8 stream)" `363 
f B "kbhit" 2 573 "int8()" `366 
v L "stream" 2 574 "int8" `368 
f G "kbhit" 2 574 "int8(int8 stream)" `367 
v L "string" 2 575 "*int8" `370 
f B "printf" 2 575 "void(*int8 string,*int8 _VA_LIST)" `369 
v L "stream" 2 576 "int8" `373 
v L "string" 2 576 "*int8" `374 
f B "fprintf" 2 576 "void(int8 stream,*int8 string,*int8 _VA_LIST)" `372 
f B "putc_send" 2 577 "void()" `376 
v L "stream" 2 578 "int8" `378 
f B "fputc_send" 2 578 "void(int8 stream)" `377 
f B "rcv_buffer_full" 2 579 "int8()" `379 
v L "stream" 2 580 "int8" `381 
f G "rcv_buffer_full" 2 580 "int8(int8 stream)" `380 
f B "rcv_buffer_bytes" 2 581 "int16()" `382 
v L "stream" 2 582 "int8" `384 
f G "rcv_buffer_bytes" 2 582 "int16(int8 stream)" `383 
f B "tx_buffer_full" 2 583 "int8()" `385 
v L "stream" 2 584 "int8" `387 
f G "tx_buffer_full" 2 584 "int8(int8 stream)" `386 
f B "tx_buffer_bytes" 2 585 "int16()" `388 
v L "stream" 2 586 "int8" `390 
f G "tx_buffer_bytes" 2 586 "int16(int8 stream)" `389  "#use i2c() Prototypes:"
f B "i2c_read" 2 589 "int8()" `391 
v L "stream" 2 590 "int8" `393 
f G "i2c_read" 2 590 "int8(int8 stream)" `392 
v L "stream" 2 591 "int8" `395 
v L "ack" 2 591 "int8" `396 
f G "i2c_read" 2 591 "int8(int8 stream,int8 ack)" `394 
v L "data" 2 592 "int8" `398 
f B "i2c_write" 2 592 "int8(int8 data)" `397 
v L "stream" 2 593 "int8" `400 
v L "data" 2 593 "int8" `401 
f G "i2c_write" 2 593 "int8(int8 stream,int8 data)" `399 
f B "i2c_start" 2 594 "void()" `402 
v L "stream" 2 595 "int8" `404 
f G "i2c_start" 2 595 "void(int8 stream)" `403 
v L "stream" 2 596 "int8" `406 
v L "restart" 2 596 "int8" `407 
f G "i2c_start" 2 596 "void(int8 stream,int8 restart)" `405 
f B "i2c_stop" 2 597 "void()" `408 
v L "stream" 2 598 "int8" `410 
f G "i2c_stop" 2 598 "void(int8 stream)" `409 
f B "i2c_isr_state" 2 599 "int8()" `411 
v L "addr" 2 600 "int8" `413 
f B "i2c_slaveaddr" 2 600 "void(int8 addr)" `412 
v L "stream" 2 601 "int8" `415 
v L "addr" 2 601 "int8" `416 
f G "i2c_slaveaddr" 2 601 "void(int8 stream,int8 addr)" `414 
f B "i2c_poll" 2 602 "int8()" `417 
v L "stream" 2 603 "int8" `419 
f G "i2c_poll" 2 603 "int8(int8 stream)" `418 
v L "baud" 2 604 "int32" `421 
f B "i2c_init" 2 604 "void(int32 baud)" `420 
v L "stream" 2 605 "int8" `423 
v L "baud" 2 605 "int32" `424 
f G "i2c_init" 2 605 "void(int8 stream,int32 baud)" `422  "#use spi() Prototypes:"
f B "spi_xfer" 2 608 "int8()" `425 
f G "spi_xfer" 2 609 "int16()" `426 
f G "spi_xfer" 2 610 "int32()" `427 
v L "data" 2 611 "int8" `429 
f G "spi_xfer" 2 611 "int8(int8 data)" `428 
v L "data" 2 612 "int16" `431 
f G "spi_xfer" 2 612 "int16(int16 data)" `430 
v L "data" 2 613 "int32" `433 
f G "spi_xfer" 2 613 "int32(int32 data)" `432 
v L "stream" 2 614 "int8" `435 
v L "data" 2 614 "int8" `436 
f G "spi_xfer" 2 614 "int8(int8 stream,int8 data)" `434 
v L "stream" 2 615 "int8" `435 
v L "data" 2 615 "int16" `439 
f G "spi_xfer" 2 615 "int16(int8 stream,int16 data)" `437 
v L "stream" 2 616 "int8" `435 
v L "data" 2 616 "int32" `442 
f G "spi_xfer" 2 616 "int32(int8 stream,int32 data)" `440 
v L "stream" 2 617 "int8" `444 
v L "data" 2 617 "int8" `445 
v L "bits" 2 617 "int8" `446 
f G "spi_xfer" 2 617 "int8(int8 stream,int8 data,int8 bits)" `443 
v L "stream" 2 618 "int8" `444 
v L "data" 2 618 "int16" `445 
v L "bits" 2 618 "int8" `450 
f G "spi_xfer" 2 618 "int16(int8 stream,int16 data,int8 bits)" `447 
v L "stream" 2 619 "int8" `444 
v L "data" 2 619 "int32" `445 
v L "bits" 2 619 "int8" `454 
f G "spi_xfer" 2 619 "int32(int8 stream,int32 data,int8 bits)" `451 
v L "baud" 2 620 "int32" `456 
f B "spi_init" 2 620 "void(int32 baud)" `455 
v L "stream" 2 621 "int8" `458 
v L "baud" 2 621 "int32" `459 
f G "spi_init" 2 621 "void(int8 stream,int32 baud)" `457 
v L "baud" 2 622 "int32" `461 
f B "spi_speed" 2 622 "void(int32 baud)" `460 
v L "stream" 2 623 "int8" `463 
v L "baud" 2 623 "int32" `464 
f G "spi_speed" 2 623 "void(int8 stream,int32 baud)" `462 
v L "stream" 2 624 "int8" `466 
v L "baud" 2 624 "int32" `467 
v L "clock" 2 624 "int32" `468 
f G "spi_speed" 2 624 "void(int8 stream,int32 baud,int32 clock)" `465 
v L "data" 2 625 "int8" `470 
f B "spi_prewrite" 2 625 "void(int8 data)" `469 
v L "data" 2 626 "int16" `472 
f G "spi_prewrite" 2 626 "void(int16 data)" `471 
v L "data" 2 627 "int32" `474 
f G "spi_prewrite" 2 627 "void(int32 data)" `473 
v L "??65535" 2 628 "int8" `476 
v L "data" 2 628 "int8" `477 
f G "spi_prewrite" 2 628 "void(int8 ,int8 data)" `475 
v L "??65535" 2 629 "int8" `476 
v L "data" 2 629 "int16" `480 
f G "spi_prewrite" 2 629 "void(int8 ,int16 data)" `478 
v L "??65535" 2 630 "int8" `476 
v L "data" 2 630 "int32" `483 
f G "spi_prewrite" 2 630 "void(int8 ,int32 data)" `481 
f B "spi_xfer_in" 2 631 "int8()" `484 
f G "spi_xfer_in" 2 632 "int16()" `485 
f G "spi_xfer_in" 2 633 "int32()" `486 
v L "bits" 2 634 "int8" `488 
f G "spi_xfer_in" 2 634 "int8(int8 bits)" `487 
v L "bits" 2 635 "int8" `490 
f G "spi_xfer_in" 2 635 "int16(int8 bits)" `489 
v L "bits" 2 636 "int8" `492 
f G "spi_xfer_in" 2 636 "int32(int8 bits)" `491 
v L "stream" 2 637 "int8" `494 
v L "bits" 2 637 "int8" `495 
f G "spi_xfer_in" 2 637 "int8(int8 stream,int8 bits)" `493 
v L "stream" 2 638 "int8" `494 
v L "bits" 2 638 "int8" `498 
f G "spi_xfer_in" 2 638 "int16(int8 stream,int8 bits)" `496 
v L "stream" 2 639 "int8" `494 
v L "bits" 2 639 "int8" `501 
f G "spi_xfer_in" 2 639 "int32(int8 stream,int8 bits)" `499  "#use rtos() Prototypes:"
f B "rtos_run" 2 642 "void()" `502 
f B "rtos_yield" 2 643 "void()" `503 
v L "task" 2 644 "int8" `505 
f B "rtos_enable" 2 644 "void(int8 task)" `504 
v L "task" 2 645 "int8" `507 
f B "rtos_disable" 2 645 "void(int8 task)" `506 
f B "rtos_terminate" 2 646 "void()" `508 
v L "flag" 2 647 "int8" `510 
f B "rtos_await" 2 647 "void(int8 flag)" `509 
v L "sem" 2 648 "int8" `512 
f B "rtos_wait" 2 648 "void(int8 sem)" `511 
v L "sem" 2 649 "int8" `514 
f B "rtos_signal" 2 649 "void(int8 sem)" `513 
v L "task" 2 650 "int8" `516 
v L "msg" 2 650 "int8" `517 
f B "rtos_msg_send" 2 650 "void(int8 task,int8 msg)" `515 
f B "rtos_msg_read" 2 651 "int8()" `518 
f B "rtos_msg_poll" 2 652 "int8()" `519 
v L "task" 2 653 "int8" `521 
f B "rtos_overrun" 2 653 "int8(int8 task)" `520 
v L "task" 2 654 "int8" `523 
v L "stat" 2 654 "*int8" `524 
f B "rtos_stats" 2 654 "void(int8 task,*int8 stat)" `522  "#use timer() Prototypes:"
f B "get_ticks" 2 657 "int8()" `525 
f G "get_ticks" 2 658 "int16()" `526 
f G "get_ticks" 2 659 "int32()" `527 
v L "stream" 2 660 "int8" `529 
f G "get_ticks" 2 660 "int8(int8 stream)" `528 
v L "stream" 2 661 "int8" `531 
f G "get_ticks" 2 661 "int16(int8 stream)" `530 
v L "stream" 2 662 "int8" `533 
f G "get_ticks" 2 662 "int32(int8 stream)" `532 
v L "value" 2 663 "int8" `535 
f B "set_ticks" 2 663 "void(int8 value)" `534 
v L "value" 2 664 "int16" `537 
f G "set_ticks" 2 664 "void(int16 value)" `536 
v L "value" 2 665 "int32" `539 
f G "set_ticks" 2 665 "void(int32 value)" `538 
v L "stream" 2 666 "int8" `541 
v L "value" 2 666 "int8" `542 
f G "set_ticks" 2 666 "void(int8 stream,int8 value)" `540 
v L "stream" 2 667 "int8" `541 
v L "value" 2 667 "int16" `545 
f G "set_ticks" 2 667 "void(int8 stream,int16 value)" `543 
v L "stream" 2 668 "int8" `541 
v L "value" 2 668 "int32" `548 
f G "set_ticks" 2 668 "void(int8 stream,int32 value)" `546  "#use pwm() Prototypes:"
f B "pwm_on" 2 671 "void()" `549 
v L "stream" 2 672 "int8" `551 
f G "pwm_on" 2 672 "void(int8 stream)" `550 
f B "pwm_off" 2 673 "void()" `552 
v L "stream" 2 674 "int8" `554 
f G "pwm_off" 2 674 "void(int8 stream)" `553 
v L "duty" 2 675 "int16" `556 
f B "pwm_set_duty" 2 675 "void(int16 duty)" `555 
v L "stream" 2 676 "int8" `558 
v L "duty" 2 676 "int16" `559 
f G "pwm_set_duty" 2 676 "void(int8 stream,int16 duty)" `557 
v L "percent" 2 677 "int16" `561 
f B "pwm_set_duty_percent" 2 677 "void(int16 percent)" `560 
v L "stream" 2 678 "int8" `563 
v L "percent" 2 678 "int16" `564 
f G "pwm_set_duty_percent" 2 678 "void(int8 stream,int16 percent)" `562 
v L "frequency" 2 679 "int32" `566 
f B "pwm_set_frequency" 2 679 "void(int32 frequency)" `565 
v L "stream" 2 680 "int8" `568 
v L "frequency" 2 680 "int32" `569 
f G "pwm_set_frequency" 2 680 "void(int8 stream,int32 frequency)" `567  "#use capture() Prototypes:"
f B "get_capture_time" 2 683 "int16()" `570 
v L "stream" 2 684 "int8" `572 
f G "get_capture_time" 2 684 "int16(int8 stream)" `571 
f B "get_capture_event" 2 685 "int8()" `573 
v L "stream" 2 686 "int8" `575 
f G "get_capture_event" 2 686 "int8(int8 stream)" `574  "Enviroment Prototypes:"
c L "get_capture_event" 2 3 2 "FUNCTION"
v L "address" 2 699 "int16" `577 
f B "goto_address" 2 699 "void(int16 address)" `576 
v L "label" 2 700 "int16" `579 
f B "label_address" 2 700 "int16(int16 label)" `578  "Program Memory Prototypes:"
v L "address" 2 703 "int16" `581 
v L "dataptr" 2 703 "*int8" `582 
v L "count" 2 703 "int16" `583 
f B "read_program_memory" 2 703 "void(int16 address,*int8 dataptr,int16 count)" `580 
v L "address" 2 704 "int16" `585 
f B "read_program_eeprom" 2 704 "int16(int16 address)" `584 
v L "address" 2 705 "int16" `587 
f B "erase_program_eeprom" 2 705 "void(int16 address)" `586 
v L "address" 2 706 "int16" `589 
v L "dataptr" 2 706 "*int8" `590 
v L "count" 2 706 "int16" `591 
f B "write_program_memory" 2 706 "void(int16 address,*int8 dataptr,int16 count)" `588 
v L "address" 2 707 "int16" `593 
v L "data" 2 707 "int16" `594 
f B "write_program_eeprom" 2 707 "void(int16 address,int16 data)" `592  "EEPROM Prototypes:"
t G "__EEADDRESS__" 2 712 "int16" `595 
v L "address" 2 717 "__EEADDRESS__" `597 
f B "read_eeprom" 2 717 "int8(__EEADDRESS__ address)" `596 
v L "address" 2 718 "__EEADDRESS__" `599 
v L "value" 2 718 "int8" `600 
f B "write_eeprom" 2 718 "void(__EEADDRESS__ address,int8 value)" `598  "INT"
c L "write_eeprom" 2 3 4 "FUNCTION"
v L "interrupt" 2 725 "int32" `602 
f B "enable_interrupts" 2 725 "void(int32 interrupt)" `601 
v L "interrupt" 2 726 "int32" `604 
f B "disable_interrupts" 2 726 "void(int32 interrupt)" `603 
v L "interrupt" 2 727 "int32" `606 
f B "clear_interrupt" 2 727 "void(int32 interrupt)" `605 
v L "interrupt" 2 728 "int32" `608 
f B "interrupt_active" 2 728 "int8(int32 interrupt)" `607 
v L "interrupt" 2 729 "int32" `610 
f B "interrupt_enabled" 2 729 "int8(int32 interrupt)" `609 
v L "source" 2 730 "int8" `612 
v L "edge" 2 730 "int8" `613 
f B "ext_int_edge" 2 730 "void(int8 source,int8 edge)" `611 
v L "address" 2 731 "int16" `615 
f B "jump_to_irs" 2 731 "void(int16 address)" `614  "Constants used in EXT_INT_EDGE() are:"
d G "L_TO_H" 2 733 "0x40"
d G "H_TO_L" 2 734 "0"
d G "GLOBAL" 2 736 "0x0BC0"
d G "PERIPH" 2 737 "0x0B40"
d G "INT_RTCC" 2 738 "0x000B20"
d G "INT_RB" 2 739 "0x01FF0B08"
d G "INT_EXT_L2H" 2 740 "0x50000B10"
d G "INT_EXT_H2L" 2 741 "0x60000B10"
d G "INT_EXT" 2 742 "0x000B10"
d G "INT_AD" 2 743 "0x008C40"
d G "INT_TBE" 2 744 "0x008C10"
d G "INT_RDA" 2 745 "0x008C20"
d G "INT_TIMER1" 2 746 "0x008C01"
d G "INT_TIMER2" 2 747 "0x008C02"
d G "INT_CCP1" 2 748 "0x008C04"
d G "INT_CCP2" 2 749 "0x008D01"
d G "INT_SSP" 2 750 "0x008C08"
d G "INT_BUSCOL" 2 751 "0x008D08"
d G "INT_EEPROM" 2 752 "0x008D10"
d G "INT_TIMER0" 2 753 "0x000B20"
d G "INT_OSC_FAIL" 2 754 "0x008D80"
d G "INT_COMP" 2 755 "0x008D20"
d G "INT_COMP2" 2 756 "0x008D40"
d G "INT_ULPWU" 2 757 "0x008D04"
d G "INT_RB0" 2 758 "0x1010B08"
d G "INT_RB1" 2 759 "0x1020B08"
d G "INT_RB2" 2 760 "0x1040B08"
d G "INT_RB3" 2 761 "0x1080B08"
d G "INT_RB4" 2 762 "0x1100B08"
d G "INT_RB5" 2 763 "0x1200B08"
d G "INT_RB6" 2 764 "0x1400B08"
d G "INT_RB7" 2 765 "0x1800B08"
D G "_lcd_h_" 3 1 ""
D G "MATH_H" 4 30 ""
D G "PI" 4 35 "3.1415926535897932"
D G "SQRT2" 4 38 "1.4142135623730950"
C L "jump_to_irs" 4 2 3 "FUNCTION"
V L "x" 4 45 "float" `621 
V L "n" 4 45 "int8" `622 
F G "CEIL_FLOOR" 4 46 "float(float x,int8 n)" `620 
V L "y" 4 47 "float" `623 
V L "res" 4 47 "float" `624 
V L "l" 4 48 "int16" `625 
V L "s" 4 49 "int1" `626 
C L "floor" 4 2 5 "FUNCTION"
V L "x" 4 207 "float" `641 
F G "floor" 4 208 "float(float x)" `640 
C L "ceil" 4 2 5 "FUNCTION"
V L "x" 4 233 "float" `643 
F G "ceil" 4 234 "float(float x)" `642 
D G "fabs" 4 259 "abs"
C L "fmod" 4 2 6 "FUNCTION"
V L "x" 4 271 "float" `645 
V L "y" 4 271 "float" `646 
F G "fmod" 4 272 "float(float x,float y)" `644 
V L "i" 4 273 "float" `647 
D G "LN2" 4 334 "0.6931471805599453"
D G "LN2_INV" 4 335 "1.4426950408889634073"
V G "pe" 4 337 "[6]" `651 
V L "x" 4 341 "float" `655 
F G "exp" 4 342 "float(float x)" `654 
V L "y" 4 343 "float" `656 
V L "res" 4 343 "float" `657 
V L "r" 4 343 "float" `658 
V L "n" 4 347 "sint8" `659 
V L "s" 4 348 "int1" `660 
C L "exp" 4 2 1 "FUNCTION"
V G "pl" 4 525 "[4]" `663 
V G "ql" 4 526 "[4]" `666 
C L "log" 4 2 3 "FUNCTION"
V L "x" 4 534 "float" `670 
F G "log" 4 535 "float(float x)" `669 
V L "y" 4 536 "float" `671 
V L "res" 4 536 "float" `672 
V L "r" 4 536 "float" `673 
V L "y2" 4 536 "float" `674 
V L "n" 4 540 "sint8" `675 
C L "log" 4 2 1 "FUNCTION"
D G "LN10" 4 758 "2.3025850929940456"
D G "LN10_INV" 4 759 "0.4342944819032518276"
C L "log10" 4 2 3 "FUNCTION"
V L "x" 4 767 "float" `677 
F G "log10" 4 768 "float(float x)" `676 
V L "r" 4 769 "float" `678 
C L "modf" 4 2 8 "FUNCTION"
V L "value" 4 808 "float" `680 
V L "iptr" 4 808 "*float" `681 
F G "modf" 4 809 "float(float value,*float iptr)" `679 
C L "pwr" 4 2 6 "FUNCTION"
V L "x" 4 836 "float" `683 
V L "y" 4 836 "float" `684 
F G "pwr" 4 837 "float(float x,float y)" `682 
C L "pow" 4 2 7 "FUNCTION"
V L "x" 4 899 "float" `686 
V L "y" 4 899 "float" `687 
F G "pow" 4 900 "float(float x,float y)" `685 
C L "sqrt" 4 2 5 "FUNCTION"
V L "x" 4 960 "float" `689 
F G "sqrt" 4 961 "float(float x)" `688 
V L "y" 4 962 "float" `690 
V L "res" 4 962 "float" `691 
V L "p" 4 966 "*int8" `692 
D G "PI_DIV_BY_TWO_INV" 4 1155 "0.63661977236758134"
D G "PI_DIV_BY_TWO" 4 1159 "1.5707963267948966"
D G "TWOBYPI" 4 1163 "0.6366197723675813"
C L "cos" 4 2 3 "FUNCTION"
V L "x" 4 1171 "float" `694 
F G "cos" 4 1172 "float(float x)" `693 
V L "y" 4 1173 "float" `695 
V L "t" 4 1173 "float" `696 
V L "t2" 4 1173 "float" `697 
V L "quad" 4 1174 "int8" `698 
V L "i" 4 1174 "int8" `699 
V L "frac" 4 1175 "float" `700 
V L "p" 4 1176 "float[5]" `701  "by the series definition for cosine"
C L "cos" 4 2 1 "FUNCTION"
C L "cos" 4 2 2 "FUNCTION"
C L "cos" 4 2 1 "FUNCTION"
C L "cos" 4 2 1 "FUNCTION"
C L "cos" 4 2 1 "FUNCTION"
C L "cos" 4 2 1 "FUNCTION"
C L "cos" 4 2 1 "FUNCTION"
C L "cos" 4 2 1 "FUNCTION"
C L "sin" 4 2 5 "FUNCTION"
V L "x" 4 1312 "float" `703 
F G "sin" 4 1313 "float(float x)" `702 
C L "tan" 4 2 5 "FUNCTION"
V L "x" 4 1338 "float" `705 
F G "tan" 4 1339 "float(float x)" `704 
V L "c" 4 1340 "float" `706 
V L "s" 4 1340 "float" `707 
V G "pas" 4 1378 "[3]" `708 
V G "qas" 4 1379 "[3]" `711 
V L "x" 4 1381 "float" `715 
V L "n" 4 1381 "int8" `716 
F G "ASIN_COS" 4 1382 "float(float x,int8 n)" `714 
V L "y" 4 1383 "float" `717 
V L "res" 4 1383 "float" `718 
V L "r" 4 1383 "float" `719 
V L "y2" 4 1383 "float" `720 
V L "s" 4 1384 "int1" `721 
C L "ASIN_COS" 4 2 1 "FUNCTION"
C L "ASIN_COS" 4 2 1 "FUNCTION"
C L "asin" 4 2 5 "FUNCTION"
V L "x" 4 1539 "float" `723 
F G "asin" 4 1540 "float(float x)" `722 
V L "r" 4 1541 "float" `724 
C L "acos" 4 2 5 "FUNCTION"
V L "x" 4 1573 "float" `726 
F G "acos" 4 1574 "float(float x)" `725 
V L "r" 4 1575 "float" `727 
V G "pat" 4 1601 "[4]" `728 
V G "qat" 4 1602 "[4]" `731 
C L "atan" 4 2 3 "FUNCTION"
V L "x" 4 1610 "float" `735 
F G "atan" 4 1611 "float(float x)" `734 
V L "y" 4 1612 "float" `736 
V L "res" 4 1612 "float" `737 
V L "r" 4 1612 "float" `738 
V L "s" 4 1613 "int1" `739 
V L "flag" 4 1613 "int1" `740 
C L "atan" 4 2 1 "FUNCTION"
C L "atan2" 4 2 7 "FUNCTION"
V L "y" 4 1753 "float" `742 
V L "x" 4 1753 "float" `743 
F G "atan2" 4 1754 "float(float y,float x)" `741 
V L "z" 4 1755 "float" `744 
V L "sign" 4 1756 "int1" `745 
V L "quad" 4 1757 "int8" `746 
C L "atan2" 4 2 1 "FUNCTION"
C L "atan2" 4 2 1 "FUNCTION"
C L "cosh" 4 2 7 "FUNCTION"
V L "x" 4 1975 "float" `749 
F G "cosh" 4 1976 "float(float x)" `748 
C L "sinh" 4 2 6 "FUNCTION"
V L "x" 4 2002 "float" `751 
F G "sinh" 4 2003 "float(float x)" `750 
C L "tanh" 4 2 6 "FUNCTION"
V L "x" 4 2032 "float" `753 
F G "tanh" 4 2033 "float(float x)" `752 
D G "LOG2" 4 2062 ".30102999566398119521"
D G "LOG2_INV" 4 2063 "3.32192809488736234787"
V L "x" 4 2064 "float" `755 
V L "exp" 4 2064 "*sint8" `756 
F G "frexp" 4 2065 "float(float x,*sint8 exp)" `754 
V L "res" 4 2066 "float" `757 
V L "sign" 4 2067 "int1" `758 
C L "ldexp" 4 2 6 "FUNCTION"
V L "value" 4 2209 "float" `760 
V L "exp" 4 2209 "sint8" `761 
F G "ldexp" 4 2210 "float(float value,sint8 exp)" `759 
C L "lcd_init" 4 2 2 "FUNCTION"
f G "lcd_init" 3 4 "void()" `766  "Ham dung de khoi dong C.LCD."
f G "lcd_read_byte" 3 5 "int8()" `767  "Ham xu ly doc thong tin (dang 8 bit) tu thong tin dang 4 bit tu C.LCD."
f G "lcd_read_nibble" 3 6 "int8()" `768  "Ham doc thong tin (dang 4 bit / nibble) tu C.LCD."
V L "address" 3 7 "int8" `770 
V L "n" 3 7 "int8" `771 
f G "lcd_send_byte" 3 7 "void(int8 address,int8 n)" `769  "Ham gui thong tin (byte) toi C.LCD tai dia chi (address)."
V L "n" 3 8 "int8" `773 
f G "lcd_send_nibble" 3 8 "void(int8 n)" `772  "Ham gui thong tin (dang 4 bit / nibble) sang C.LCD."
V L "x" 3 9 "int8" `775 
V L "y" 3 9 "int8" `776 
f G "lcd_gotoxy" 3 9 "void(int8 x,int8 y)" `774  "Ham thiet lap vi tri ghi tren C.LCD."
V L "x" 3 10 "int8" `778 
V L "y" 3 10 "int8" `779 
f G "lcd_getc" 3 10 "int8(int8 x,int8 y)" `777  "Ham tra ve ky tu tai vi tri (x,y) tren C.LCD."
V L "c" 3 11 "int8" `781 
f G "lcd_putc" 3 11 "void(int8 c)" `780  "Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD."
D G "LCD_RS_PIN" 3 14 "PIN_D1	" "Cac ket noi C.LCD voi vi dieu khien."
D G "LCD_RW_PIN" 3 15 "PIN_D2"
D G "LCD_ENABLE_PIN" 3 16 "PIN_D3"
D G "LCD_DATA4" 3 17 "PIN_D4"
D G "LCD_DATA5" 3 18 "PIN_D5"
D G "LCD_DATA6" 3 19 "PIN_D6"
D G "LCD_DATA7" 3 20 "PIN_D7"
D G "lcd_output_enable" 3 39 "(x)	output_bit(LCD_ENABLE_PIN, x)	" "Lenh dieu khien chan LCD_ENABLE_PIN."
D G "lcd_enable_tris" 3 40 "()	output_drive(LCD_ENABLE_PIN)"
D G "lcd_output_rs" 3 42 "(x)	output_bit(LCD_RS_PIN, x)	" "Lenh dieu khien chan LCD_RS_PIN."
D G "lcd_rs_tris" 3 43 "()		output_drive(LCD_RS_PIN)"
D G "lcd_output_rw" 3 45 "(x)	output_bit(LCD_RW_PIN, x)	" "Lenh dieu khien chan LCD_RW_PIN"
D G "lcd_rw_tris" 3 46 "()		output_drive(LCD_RW_PIN)"
D G "lcd_line_one" 3 48 "0x00" "Dia chi RAM C.LCD cho hang thu 1."
D G "lcd_line_two" 3 49 "0x40" "Dia chi RAM C.LCD cho hang thu 2."
D G "lcd_line_three" 3 50 "0x14"
D G "lcd_line_four" 3 51 "0x54"
D G "LCD_TYPE" 3 52 "0x02" "Thong tin cau hinh C.LCD: 0x00=5x7, 0x01=5x10, 0x02=2 lines"
C L "lcd_putc" 3 12 1 "FUNCTION"
V G "LCD_INIT_STRING" 3 55 "[4]" `782 
C L "lcd_putc" 3 12 13 "FUNCTION"
C L "lcd_init" 3 12 1 "FUNCTION"
F G "lcd_init" 3 72 "void()" `766  "Khai bao bien."
V L "i" 3 74 "int8" `785  "Dinh nghia ham."
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_init" 3 12 2 "FUNCTION"
C L "lcd_init" 3 12 4 "FUNCTION"
C L "lcd_init" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
F G "lcd_read_byte" 3 109 "int8()" `767  "Khai bao bien."
V L "low" 3 111 "int8" `786 
V L "high" 3 111 "int8" `787  "Dinh nghia ham."
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 2 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 2 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_byte" 3 12 1 "FUNCTION"
C L "lcd_read_nibble" 3 12 1 "FUNCTION"
F G "lcd_read_nibble" 3 142 "int8()" `768  "Khai bao bien."
V L "n" 3 144 "int8" `788 
C L "lcd_read_nibble" 3 12 2 "FUNCTION"
C L "lcd_read_nibble" 3 12 1 "FUNCTION"
C L "lcd_read_nibble" 3 12 1 "FUNCTION"
V L "address" 3 155 "int8" `770 
V L "n" 3 155 "int8" `771  "Ham gui thong tin (byte) toi C.LCD tai dia chi (address)."
F G "lcd_send_byte" 3 156 "void(int8 address,int8 n)" `769  "address = 0: Lenh / 1: Du lieu."
C L "lcd_send_byte" 3 12 3 "FUNCTION"
C L "lcd_send_byte" 3 12 1 "FUNCTION"
C L "lcd_send_byte" 3 12 1 "FUNCTION"
C L "lcd_send_byte" 3 12 1 "FUNCTION"
C L "lcd_send_byte" 3 12 1 "FUNCTION"
C L "lcd_send_byte" 3 12 1 "FUNCTION"
C L "lcd_send_byte" 3 12 1 "FUNCTION"
C L "lcd_send_byte" 3 12 1 "FUNCTION"
C L "lcd_send_byte" 3 12 1 "FUNCTION"
C L "lcd_send_byte" 3 12 1 "FUNCTION"
V L "n" 3 173 "int8" `773  "Ham gui thong tin (dang 4 bit / nibble) sang C.LCD."
F G "lcd_send_nibble" 3 174 "void(int8 n)" `772  "n = Thong tin can gui. 4 bit can gui phai nam vi tri 4 bit thap."
C L "lcd_send_nibble" 3 12 2 "FUNCTION"
C L "lcd_send_nibble" 3 12 1 "FUNCTION"
C L "lcd_send_nibble" 3 12 1 "FUNCTION"
C L "lcd_send_nibble" 3 12 1 "FUNCTION"
C L "lcd_send_nibble" 3 12 1 "FUNCTION"
C L "lcd_send_nibble" 3 12 1 "FUNCTION"
V L "x" 3 190 "int8" `775 
V L "y" 3 190 "int8" `776  "Ham thiet lap vi tri ghi tren C.LCD (Goc tren ben trai co toa do la 1,1)."
F G "lcd_gotoxy" 3 191 "void(int8 x,int8 y)" `774  "Khai bao bien."
V L "address" 3 193 "int8" `789  "Dinh nghia ham."
C L "lcd_gotoxy" 3 12 1 "FUNCTION"
C L "lcd_gotoxy" 3 12 1 "FUNCTION"
C L "lcd_gotoxy" 3 12 1 "FUNCTION"
C L "lcd_gotoxy" 3 12 1 "FUNCTION"
C L "lcd_gotoxy" 3 12 3 "FUNCTION"
C L "lcd_gotoxy" 3 12 1 "FUNCTION"
C L "lcd_getc" 3 12 1 "FUNCTION"
V L "x" 3 211 "int8" `778 
V L "y" 3 211 "int8" `779  "Ham tra ve ky tu tai vi tri (x,y) tren C.LCD."
F G "lcd_getc" 3 212 "int8(int8 x,int8 y)" `777  "Khai bao bien."
V L "value" 3 214 "int8" `790  "Dinh nghia ham."
C L "lcd_getc" 3 12 1 "FUNCTION"
C L "lcd_getc" 3 12 1 "FUNCTION"
C L "lcd_getc" 3 12 1 "FUNCTION"
C L "lcd_getc" 3 12 1 "FUNCTION"
C L "lcd_getc" 3 12 1 "FUNCTION"
C L "lcd_getc" 3 12 1 "FUNCTION"
V L "c" 3 226 "int8" `781  "Ham se hien thi ky tu c tai vi tri ke tiep tren C.LCD."
F G "lcd_putc" 3 227 "void(int8 c)" `780  "Khai bao bien."
C L "lcd_putc" 3 12 1 "FUNCTION"
C L "lcd_putc" 3 12 1 "FUNCTION"
C L "lcd_putc" 3 12 1 "FUNCTION"
C L "lcd_putc" 3 12 1 "FUNCTION"
C L "lcd_putc" 3 12 1 "FUNCTION"
C L "lcd_putc" 3 12 1 "FUNCTION"
C L "lcd_putc" 3 12 1 "FUNCTION"
C L "lcd_putc" 3 12 1 "FUNCTION"
C L "lcd_putc" 3 12 1 "FUNCTION"
C L "lcd_putc" 3 12 1 "FUNCTION"
C L "lcd_putc" 3 12 1 "FUNCTION"
D G "MFRC522_CS" 1 11 "PIN_E2"
D G "MFRC522_SCK" 1 12 "PIN_C3"
D G "MFRC522_SI" 1 13 "PIN_C4"
D G "MFRC522_SO" 1 14 "PIN_C5"
D G "MFRC522_RST" 1 15 "PIN_E0"
D G "PCD_IDLE" 5 3 "0x00" "NO action; Cancel the current command"
D G "PCD_AUTHENT" 5 4 "0x0E" "Authentication Key"
D G "PCD_RECEIVE" 5 5 "0x08" "Receive Data"
D G "PCD_TRANSMIT" 5 6 "0x04" "Transmit data"
D G "PCD_TRANSCEIVE" 5 7 "0x0C" "Transmit and receive data,"
D G "PCD_RESETPHASE" 5 8 "0x0F" "Reset"
D G "PCD_CALCCRC" 5 9 "0x03" "CRC Calculate"
D G "PICC_REQIDL" 5 11 "0x26" "find the antenna area does not enter hibernation"
D G "PICC_REQALL" 5 12 "0x52" "find all the cards antenna area"
D G "PICC_ANTICOLL" 5 13 "0x93" "anti-collision"
D G "PICC_SElECTTAG" 5 14 "0x93" "election card"
D G "PICC_AUTHENT1A" 5 15 "0x60" "authentication key A"
D G "PICC_AUTHENT1B" 5 16 "0x61" "authentication key B"
D G "PICC_READ" 5 17 "0x30" "Read Block"
D G "PICC_WRITE" 5 18 "0xA0" "write block"
D G "PICC_DECREMENT" 5 19 "0xC0" "debit"
D G "PICC_INCREMENT" 5 20 "0xC1" "recharge"
D G "PICC_RESTORE" 5 21 "0xC2" "transfer block data to the buffer"
D G "PICC_TRANSFER" 5 22 "0xB0" "save the data in the buffer"
D G "PICC_HALT" 5 23 "0x50" "Sleep"
D G "MI_OK" 5 25 "0"
D G "MI_NOTAGERR" 5 26 "1"
D G "MI_ERR" 5 27 "2"
D G "RESERVED00" 5 30 "0x00"
D G "COMMANDREG" 5 31 "0x01"
D G "COMMIENREG" 5 32 "0x02"
D G "DIVLENREG" 5 33 "0x03"
D G "COMMIRQREG" 5 34 "0x04"
D G "DIVIRQREG" 5 35 "0x05"
D G "ERRORREG" 5 36 "0x06"
D G "STATUS1REG" 5 37 "0x07"
D G "STATUS2REG" 5 38 "0x08"
D G "FIFODATAREG" 5 39 "0x09"
D G "FIFOLEVELREG" 5 40 "0x0A"
D G "WATERLEVELREG" 5 41 "0x0B"
D G "CONTROLREG" 5 42 "0x0C"
D G "BITFRAMINGREG" 5 43 "0x0D"
D G "COLLREG" 5 44 "0x0E"
D G "RESERVED01" 5 45 "0x0F"
D G "RESERVED10" 5 47 "0x10"
D G "MODEREG" 5 48 "0x11"
D G "TXMODEREG" 5 49 "0x12"
D G "RXMODEREG" 5 50 "0x13"
D G "TXCONTROLREG" 5 51 "0x14"
D G "TXAUTOREG" 5 52 "0x15"
D G "TXSELREG" 5 53 "0x16"
D G "RXSELREG" 5 54 "0x17"
D G "RXTHRESHOLDREG" 5 55 "0x18"
D G "DEMODREG" 5 56 "0x19"
D G "RESERVED11" 5 57 "0x1A"
D G "RESERVED12" 5 58 "0x1B"
D G "MIFAREREG" 5 59 "0x1C"
D G "RESERVED13" 5 60 "0x1D"
D G "RESERVED14" 5 61 "0x1E"
D G "SERIALSPEEDREG" 5 62 "0x1F"
D G "RESERVED20" 5 64 "0x20"
D G "CRCRESULTREGM" 5 65 "0x21"
D G "CRCRESULTREGL" 5 66 "0x22"
D G "RESERVED21" 5 67 "0x23"
D G "MODWIDTHREG" 5 68 "0x24"
D G "RESERVED22" 5 69 "0x25"
D G "RFCFGREG" 5 70 "0x26"
D G "GSNREG" 5 71 "0x27"
D G "CWGSPREG" 5 72 "0x28"
D G "MODGSPREG" 5 73 "0x29"
D G "TMODEREG" 5 74 "0x2A"
D G "TPRESCALERREG" 5 75 "0x2B"
D G "TRELOADREGH" 5 76 "0x2C"
D G "TRELOADREGL" 5 77 "0x2D"
D G "TCOUNTERVALUEREGH" 5 78 "0x2E"
D G "TCOUNTERVALUEREGL" 5 79 "0x2F"
D G "RESERVED30" 5 81 "0x30"
D G "TESTSEL1REG" 5 82 "0x31"
D G "TESTSEL2REG" 5 83 "0x32"
D G "TESTPINENREG" 5 84 "0x33"
D G "TESTPINVALUEREG" 5 85 "0x34"
D G "TESTBUSREG" 5 86 "0x35"
D G "AUTOTESTREG" 5 87 "0x36"
D G "VERSIONREG" 5 88 "0x37"
D G "ANALOGTESTREG" 5 89 "0x38"
D G "TESTDAC1REG" 5 90 "0x39"
D G "TESTDAC2REG" 5 91 "0x3A"
D G "TESTADCREG" 5 92 "0x3B"
D G "RESERVED31" 5 93 "0x3C"
D G "RESERVED32" 5 94 "0x3D"
D G "RESERVED33" 5 95 "0x3E"
D G "RESERVED34" 5 96 "0x3F"
V L "addr" 5 97 "int8" `792 
V L "value" 5 97 "int8" `793 
F G "MFRC522_Wr_Old" 5 98 "void(int8 addr,int8 value)" `791 
V L "addr" 5 104 "int8" `795 
F G "MFRC522_Rd_Old" 5 105 "int8(int8 addr)" `794 
V L "value" 5 106 "int8" `796 
V L "address" 5 114 "int8" `798 
F G "MFRC522_Rd" 5 115 "int8(int8 address)" `797 
V L "i" 5 116 "int8" `799 
V L "ucAddr" 5 116 "int8" `800 
V L "ucResult" 5 117 "int8" `801 
C L "MFRC522_Rd" 5 1 1 "FUNCTION"
C L "MFRC522_Rd" 5 1 1 "FUNCTION"
V L "address" 5 144 "int8" `804 
V L "value" 5 144 "int8" `805 
F G "MFRC522_Wr" 5 145 "void(int8 address,int8 value)" `803 
V L "i" 5 147 "int8" `806 
V L "ucAddr" 5 147 "int8" `807 
V L "addr" 5 171 "int8" `809 
V L "mask" 5 171 "int8" `810 
F G "MFRC522_Clear_Bit" 5 172 "void(int8 addr,int8 mask)" `808 
V L "tmp" 5 172 "int8" `811 
C L "MFRC522_Clear_Bit" 5 1 1 "FUNCTION"
V L "addr" 5 176 "int8" `813 
V L "mask" 5 176 "int8" `814 
F G "MFRC522_Set_Bit" 5 177 "void(int8 addr,int8 mask)" `812 
V L "tmp" 5 177 "int8" `815 
F G "MFRC522_Reset" 5 182 "void()" `816 
F G "MFRC522_AntennaOn" 5 193 "void()" `817 
V L "stt" 5 194 "int8" `818 
C L "MFRC522_AntennaOn" 5 1 3 "FUNCTION"
F G "MFRC522_AntennaOff" 5 202 "void()" `819 
F G "MFRC522_Init" 5 206 "void()" `820 
C L "MFRC522_Init" 5 1 1 "FUNCTION"
C L "MFRC522_Init" 5 1 1 "FUNCTION"
C L "MFRC522_Init" 5 1 1 "FUNCTION"
C L "MFRC522_Init" 5 1 4 "FUNCTION"
V L "command" 5 225 "int8" `822 
V L "sendData" 5 225 "*int8" `823 
V L "sendLen" 5 225 "int8" `824 
V L "backData" 5 225 "*int8" `825 
V L "backLen" 5 225 "*int8" `826 
F G "MFRC522_ToCard" 5 226 "int8(int8 command,*int8 sendData,int8 sendLen,*int8 backData,*int8 backLen)" `821 
V L "_status" 5 227 "int8" `827 
V L "irqEn" 5 228 "int8" `828 
V L "waitIRq" 5 229 "int8" `829 
V L "lastBits" 5 230 "int8" `830 
V L "n" 5 231 "int8" `831 
V L "i" 5 232 "int8" `832 
C L "MFRC522_ToCard" 5 1 1 "FUNCTION"
C L "MFRC522_ToCard" 5 1 1 "FUNCTION"
C L "MFRC522_ToCard" 5 1 1 "FUNCTION"
C L "MFRC522_ToCard" 5 1 1 "FUNCTION"
C L "MFRC522_ToCard" 5 1 1 "FUNCTION"
C L "MFRC522_ToCard" 5 1 2 "FUNCTION"
C L "MFRC522_ToCard" 5 1 1 "FUNCTION"
C L "MFRC522_ToCard" 5 1 1 "FUNCTION"
C L "MFRC522_ToCard" 5 1 2 "FUNCTION"
C L "MFRC522_ToCard" 5 1 2 "FUNCTION"
C L "MFRC522_ToCard" 5 1 1 "FUNCTION"
C L "MFRC522_ToCard" 5 1 1 "FUNCTION"
C L "MFRC522_ToCard" 5 1 1 "FUNCTION"
C L "MFRC522_ToCard" 5 1 2 "FUNCTION"
V L "reqMode" 5 328 "int8" `834 
V L "TagType" 5 328 "*int8" `835 
F G "MFRC522_Request" 5 329 "int8(int8 reqMode,*int8 TagType)" `833 
V L "_status" 5 330 "int8" `836 
V L "backBits" 5 331 "int8" `837  "The received data bits"
C L "MFRC522_Request" 5 1 1 "FUNCTION"
V L "dataIn" 5 341 "*int8" `839 
V L "length" 5 341 "int8" `840 
V L "dataOut" 5 341 "*int8" `841 
F G "MFRC522_CRC" 5 342 "void(*int8 dataIn,int8 length,*int8 dataOut)" `838 
V L "i" 5 343 "int8" `842 
V L "n" 5 343 "int8" `843 
C L "MFRC522_CRC" 5 1 1 "FUNCTION"
C L "MFRC522_CRC" 5 1 1 "FUNCTION"
C L "MFRC522_CRC" 5 1 1 "FUNCTION"
V L "serNum" 5 367 "*int8" `845 
F G "MFRC522_SelectTag" 5 368 "int8(*int8 serNum)" `844 
V L "i" 5 369 "int8" `846 
V L "_status" 5 370 "int8" `847 
V L "size" 5 371 "int8" `848 
V L "recvBits" 5 372 "int8" `849 
V L "buffer" 5 373 "int8[9]" `850  "MFRC522_Clear_Bit( STATUS2REG, 0x08 );   //MFCrypto1On=0"
C L "MFRC522_Halt" 5 1 1 "FUNCTION"
F G "MFRC522_Halt" 5 400 "void()" `851 
V L "unLen" 5 401 "int8" `852 
V L "buff" 5 402 "int8[4]" `853 
V L "authMode" 5 411 "int8" `855 
V L "BlockAddr" 5 411 "int8" `856 
V L "Sectorkey" 5 411 "*int8" `857 
V L "serNum" 5 411 "*int8" `858 
F G "MFRC522_Auth" 5 412 "int8(int8 authMode,int8 BlockAddr,*int8 Sectorkey,*int8 serNum)" `854 
V L "_status" 5 413 "int8" `859 
V L "recvBits" 5 414 "int8" `860 
V L "i" 5 415 "int8" `861 
V L "buff" 5 416 "int8[12]" `862  "Verify the command block address + sector + password + card serial number"
V L "BlockAddr" 5 441 "int8" `864 
V L "writeData" 5 441 "*int8" `865 
F G "MFRC522_Write" 5 442 "int8(int8 BlockAddr,*int8 writeData)" `863 
V L "_status" 5 443 "int8" `866 
V L "recvBits" 5 444 "int8" `867 
V L "i" 5 445 "int8" `868 
V L "buff" 5 446 "int8[18]" `869 
C L "MFRC522_Write" 5 1 1 "FUNCTION"
V L "BlockAddr" 5 472 "int8" `871 
V L "recvData" 5 472 "*int8" `872 
F G "MFRC522_Read" 5 473 "int8(int8 BlockAddr,*int8 recvData)" `870 
V L "_status" 5 474 "int8" `873 
V L "unLen" 5 475 "int8" `874 
V L "serNum" 5 488 "*int8" `876 
F G "MFRC522_AntiColl" 5 489 "int8(*int8 serNum)" `875 
V L "_status" 5 490 "int8" `877 
V L "i" 5 491 "int8" `878 
V L "serNumCheck" 5 492 "int8" `879 
V L "unLen" 5 493 "int8" `880 
C L "MFRC522_AntiColl" 5 1 1 "FUNCTION"
C L "MFRC522_isCard" 5 1 5 "FUNCTION"
V L "TagType" 5 518 "*int8" `882 
F G "MFRC522_isCard" 5 519 "int8(*int8 TagType)" `881 
V L "str" 5 525 "*int8" `884 
F G "MFRC522_ReadCardSerial" 5 526 "int8(*int8 str)" `883 
V L "_status" 5 527 "int8" `885 
C L "_CaiDatLCD" 0 2 2 "FUNCTION"
f G "_CaiDatLCD" 0 7 "void()" `886  "su dung ngat"
C L "_CaiDatLCD" 0 2 1 "FUNCTION"
F G "MAIN" 0 15 "void()" `887 
V L "UID" 0 16 "int8[6]" `888 
V L "i" 0 16 "int8" `889 
V L "TagType" 0 17 "int8" `890  "char writeData[] = "Kevifa.com";"
C L "MAIN" 0 2 1 "FUNCTION"
C L "MAIN" 0 2 1 "FUNCTION"
C L "MAIN" 0 2 1 "FUNCTION"
C L "MAIN" 0 2 1 "FUNCTION"
C L "MAIN" 0 2 2 "FUNCTION"
C L "MAIN" 0 2 1 "FUNCTION"
C L "_CaiDatLCD" 0 2 1 "FUNCTION"
F G "_CaiDatLCD" 0 51 "void()" `886 
C L "_CaiDatLCD" 0 2 1 "FUNCTION"
F B "reset_cpu" 0 0
F B "abs" 1 0
F B "sleep_ulpwu" 1 0
F B "sleep" 0 0
F B "delay_cycles" 1 0
F B "read_bank" 2 0
F B "write_bank" 3 0
F B "shift_left" 2 2
F B "shift_right" 2 2
F B "rotate_left" 2 0
F B "rotate_right" 2 0
F B "_mul" 2 0
F B "memset" 3 0
F B "isamoung" 2 0
F B "isamong" 2 0
F B "bit_set" 2 0
F B "bit_clear" 2 0
F B "bit_test" 2 0
F B "toupper" 1 0
F B "tolower" 1 0
F B "swap" 1 0
F B "printf" 1 255
F B "fprintf" 1 255
F B "sprintf" 1 255
F B "scanf" 1 255
F B "fscanf" 1 255
F B "make8" 2 0
F B "make16" 2 0
F B "make32" 1 255
F B "label_address" 1 1
F B "goto_address" 1 0
F B "_va_arg" 1 0
F B "offsetofbit" 2 2
F B "_iosctrl" 1 2
F B "profileout" 1 2
F B "enable_interrupts" 1 0
F B "disable_interrupts" 1 0
F B "interrupt_active" 1 0
F B "clear_interrupt" 1 0
F B "interrupt_enabled" 1 0
F B "jump_to_isr" 1 0
F B "ext_int_edge" 1 2
F B "read_eeprom" 1 0
F B "write_eeprom" 2 0
F B "read_program_eeprom" 1 0
F B "write_program_eeprom" 2 0
F B "write_program_memory" 4 0
F B "write_program_memory8" 4 0
F B "read_program_memory" 4 0
F B "read_program_memory8" 4 0
F B "read_rom_memory" 3 0
F B "erase_program_eeprom" 1 0
F B "strcpy" 2 0
F B "memcpy" 3 0
F B "strstr100" 2 0
F B "output_high" 1 0
F B "output_low" 1 0
F B "input" 1 0
F B "input_state" 1 0
F B "output_float" 1 0
F B "output_drive" 1 0
F B "output_bit" 1 1
F B "output_toggle" 1 0
F B "output_a" 1 0
F B "output_b" 1 0
F B "output_c" 1 0
F B "output_d" 1 0
F B "output_e" 1 0
F B "input_a" 0 0
F B "input_b" 0 0
F B "input_c" 0 0
F B "input_d" 0 0
F B "input_e" 0 0
F B "set_tris_a" 1 0
F B "set_tris_b" 1 0
F B "set_tris_c" 1 0
F B "set_tris_d" 1 0
F B "set_tris_e" 1 0
F B "get_tris_a" 0 0
F B "get_tris_b" 0 0
F B "get_tris_c" 0 0
F B "get_tris_d" 0 0
F B "get_tris_e" 0 0
F B "input_change_a" 0 0
F B "input_change_b" 0 0
F B "input_change_c" 0 0
F B "input_change_d" 0 0
F B "input_change_e" 0 0
F B "port_b_pullups" 1 0
F B "setup_counters" 2 0
F B "setup_wdt" 1 0
F B "restart_cause" 0 0
F B "restart_wdt" 0 0
F B "get_rtcc" 0 0
F B "set_rtcc" 1 0
F B "get_timer0" 0 0
F B "set_timer0" 1 0
F B "setup_comparator" 1 0
F B "setup_port_a" 1 2
F B "setup_adc_ports" 1 2
F B "get_adc_ports" 0 0
F B "setup_adc" 1 0
F B "set_adc_channel" 1 0
F B "read_adc" 0 1
F B "adc_done" 0 0
F B "setup_timer_0" 1 0
F B "setup_vref" 1 0
F B "setup_timer_1" 1 0
F B "get_timer1" 0 0
F B "set_timer1" 1 0
F B "setup_timer_2" 3 0
F B "get_timer2" 0 0
F B "set_timer2" 1 0
F B "setup_ccp1" 1 2
F B "set_pwm1_duty" 1 0
F B "setup_ccp2" 1 0
F B "set_pwm2_duty" 1 0
F B "setup_oscillator" 0 2
F B "setup_spi" 1 0
F B "spi_read" 0 1
F B "spi_write" 1 2
F B "spi_data_is_in" 0 0
F B "setup_spi2" 1 0
F B "spi_read2" 0 1
F B "spi_write2" 1 0
F B "spi_data_is_in2" 0 0
F B "brownout_enable" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
F B "delay_ms" 1 0
F B "delay_us" 1 0
